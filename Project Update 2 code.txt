function sysCall_threadmain()
    jointHandles={-1,-1,-1,-1,-1,-1}
    for i=1,6,1 do
        jointHandles[i]=sim.getObjectHandle('UR3_joint'..i)
    end

    -- Set-up some of the RML vectors:
    vel=180                 --set velocity
    accel=40                --set acceleration
    jerk=80                 --set jerk
    currentVel={0,0,0,0,0,0,0}      --starting vel and accel
    currentAccel={0,0,0,0,0,0,0}
    d2r = math.pi/180               --constant for degree to radians
    --144.40, -70.9, 81.25, -100.80, -89.70, 0]
    maxVel={vel*math.pi/180,vel*math.pi/180,vel*math.pi/180,vel*math.pi/180,vel*math.pi/180,vel*math.pi/180}
    maxAccel={accel*math.pi/180,accel*math.pi/180,accel*math.pi/180,accel*math.pi/180,accel*math.pi/180,accel*math.pi/180}
    maxJerk={jerk*math.pi/180,jerk*math.pi/180,jerk*math.pi/180,jerk*math.pi/180,jerk*math.pi/180,jerk*math.pi/180}
    targetVel={0,0,0,0,0,0}

    --This section goes position, move, succ, move, unsucc
    targetPos1={d2r*140,d2r*(0),d2r*90,d2r*(0),d2r*(270),0}--{90*math.pi/180,90*math.pi/180,-90*math.pi/180,90*math.pi/180,90*math.pi/180,90*math.pi/180}
    sim.rmlMoveToJointPositions(jointHandles,-1,currentVel,currentAccel,maxVel,maxAccel,maxJerk,targetPos1,targetVel)
    targetPos2={d2r*140,d2r*(55),d2r*35,d2r*(0),d2r*(270),0}--{-90*math.pi/180,45*math.pi/180,90*math.pi/180,135*math.pi/180,90*math.pi/180,90*math.pi/180}
    sim.rmlMoveToJointPositions(jointHandles,-1,currentVel,currentAccel,maxVel,maxAccel,maxJerk,targetPos2,targetVel)
    sim.setIntegerSignal('BaxterVacuumCup_active',1)
    targetPos3={0,0,0,0,d2r*90,d2r*90}
    sim.rmlMoveToJointPositions(jointHandles,-1,currentVel,currentAccel,maxVel,maxAccel,maxJerk,targetPos3,targetVel)
    sim.setIntegerSignal('BaxterVacuumCup_active',0)
end
